
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import clases.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\006\013\000\002\010\013\000\002" +
    "\012\005\000\002\012\003\000\002\011\005\000\002\011" +
    "\003\000\002\013\010\000\002\013\006\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\007\003\000\002\007\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\020\003\000\002\020\003\000\002\016\011\000\002" +
    "\017\013\000\002\024\010\000\002\030\007\000\002\030" +
    "\006\000\002\023\004\000\002\023\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\027\010\000\002\026\010" +
    "\000\002\025\010\000\002\031\004\000\002\031\003\000" +
    "\002\032\003\000\002\032\004\000\002\032\003\000\002" +
    "\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\015\004\001\002\000\032\003\027\004" +
    "\011\010\026\011\022\014\010\021\013\022\033\043\030" +
    "\047\025\050\015\051\020\052\034\001\002\000\004\002" +
    "\006\001\002\000\004\002\001\001\002\000\032\003\ufffa" +
    "\004\ufffa\010\ufffa\011\ufffa\014\ufffa\021\ufffa\022\ufffa\043" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002\000\004" +
    "\004\222\001\002\000\052\003\uffc4\004\uffc4\010\uffc4\011" +
    "\uffc4\014\uffc4\021\uffc4\022\uffc4\043\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\032\003\027" +
    "\004\011\010\026\011\022\014\220\021\013\022\033\043" +
    "\030\047\025\050\015\051\020\052\034\001\002\000\052" +
    "\003\uffc1\004\uffc1\010\uffc1\011\uffc1\014\uffc1\021\uffc1\022" +
    "\uffc1\043\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\001\002\000\032\003\ufffe\004\ufffe\010\ufffe\011\ufffe" +
    "\014\ufffe\021\ufffe\022\ufffe\043\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\001\002\000\006\014\uffcc\040\uffcc\001\002" +
    "\000\004\040\137\001\002\000\032\003\ufffb\004\ufffb\010" +
    "\ufffb\011\ufffb\014\ufffb\021\ufffb\022\ufffb\043\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\001\002\000\006\014\uffcb\040" +
    "\uffcb\001\002\000\032\003\ufffc\004\ufffc\010\ufffc\011\ufffc" +
    "\014\ufffc\021\ufffc\022\ufffc\043\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\001\002\000\052\003\uffc2\004\uffc2\010\uffc2" +
    "\011\uffc2\014\uffc2\021\uffc2\022\uffc2\043\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\032\003" +
    "\ufff8\004\ufff8\010\ufff8\011\ufff8\014\ufff8\021\ufff8\022\ufff8" +
    "\043\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\001\002\000" +
    "\032\003\ufff9\004\ufff9\010\ufff9\011\ufff9\014\ufff9\021\ufff9" +
    "\022\ufff9\043\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\001" +
    "\002\000\006\014\uffcd\040\uffcd\001\002\000\004\005\127" +
    "\001\002\000\012\004\011\011\022\014\010\021\013\001" +
    "\002\000\004\007\107\001\002\000\032\003\ufffd\004\ufffd" +
    "\010\ufffd\011\ufffd\014\ufffd\021\ufffd\022\ufffd\043\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000\052\003\uffc5" +
    "\004\uffc5\010\uffc5\011\uffc5\014\uffc5\021\uffc5\022\uffc5\043" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001" +
    "\002\000\004\005\035\001\002\000\006\014\uffca\040\uffca" +
    "\001\002\000\006\012\036\013\037\001\002\000\004\007" +
    "\uffe4\001\002\000\004\007\uffe3\001\002\000\004\007\041" +
    "\001\002\000\004\021\042\001\002\000\004\006\043\001" +
    "\002\000\006\021\044\023\046\001\002\000\006\014\ufff4" +
    "\041\ufff4\001\002\000\004\014\105\001\002\000\036\011" +
    "\060\016\052\017\055\025\071\026\070\027\065\030\057" +
    "\031\067\032\053\033\054\034\061\035\047\036\063\037" +
    "\062\001\002\000\004\040\uffe8\001\002\000\006\020\102" +
    "\024\103\001\002\000\012\014\uffe2\020\uffe2\024\uffe2\041" +
    "\uffe2\001\002\000\012\014\uffe1\020\uffe1\024\uffe1\041\uffe1" +
    "\001\002\000\004\040\uffea\001\002\000\004\040\uffe9\001" +
    "\002\000\012\014\uffe0\020\uffe0\024\uffe0\041\uffe0\001\002" +
    "\000\010\014\ufff2\020\ufff2\024\ufff2\001\002\000\004\040" +
    "\uffed\001\002\000\012\014\uffdf\020\uffdf\024\uffdf\041\uffdf" +
    "\001\002\000\004\040\uffe6\001\002\000\004\040\uffe5\001" +
    "\002\000\004\040\uffe7\001\002\000\004\040\077\001\002" +
    "\000\004\040\uffec\001\002\000\004\040\072\001\002\000" +
    "\004\040\uffeb\001\002\000\004\040\uffee\001\002\000\004" +
    "\040\uffef\001\002\000\036\011\060\016\052\017\055\025" +
    "\071\026\070\027\065\030\057\031\067\032\053\033\054" +
    "\034\061\035\047\036\063\037\062\001\002\000\004\020" +
    "\074\001\002\000\036\011\060\016\052\017\055\025\071" +
    "\026\070\027\065\030\057\031\067\032\053\033\054\034" +
    "\061\035\047\036\063\037\062\001\002\000\004\041\076" +
    "\001\002\000\012\014\ufff1\020\ufff1\024\ufff1\041\ufff1\001" +
    "\002\000\006\021\044\023\046\001\002\000\004\041\101" +
    "\001\002\000\012\014\ufff0\020\ufff0\024\ufff0\041\ufff0\001" +
    "\002\000\036\011\060\016\052\017\055\025\071\026\070" +
    "\027\065\030\057\031\067\032\053\033\054\034\061\035" +
    "\047\036\063\037\062\001\002\000\006\014\ufff5\041\ufff5" +
    "\001\002\000\010\014\ufff3\020\ufff3\024\ufff3\001\002\000" +
    "\004\004\106\001\002\000\032\003\ufff6\004\ufff6\010\ufff6" +
    "\011\ufff6\014\ufff6\021\ufff6\022\ufff6\043\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\001\002\000\006\044\111\045\110" +
    "\001\002\000\004\042\116\001\002\000\004\042\112\001" +
    "\002\000\036\011\060\016\052\017\055\025\071\026\070" +
    "\027\065\030\057\031\067\032\053\033\054\034\061\035" +
    "\047\036\063\037\062\001\002\000\006\014\114\020\102" +
    "\001\002\000\004\004\115\001\002\000\032\003\uffdc\004" +
    "\uffdc\010\uffdc\011\uffdc\014\uffdc\021\uffdc\022\uffdc\043\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000\006\011" +
    "\117\016\121\001\002\000\006\014\uffdd\046\uffdd\001\002" +
    "\000\004\046\122\001\002\000\006\014\uffde\046\uffde\001" +
    "\002\000\006\021\044\023\046\001\002\000\004\014\124" +
    "\001\002\000\004\004\125\001\002\000\032\003\uffdb\004" +
    "\uffdb\010\uffdb\011\uffdb\014\uffdb\021\uffdb\022\uffdb\043\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\001\002\000\052\003" +
    "\uffc6\004\uffc6\010\uffc6\011\uffc6\014\uffc6\021\uffc6\022\uffc6" +
    "\043\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\001\002\000\006\012\036\013\037\001\002\000\004\007" +
    "\131\001\002\000\004\011\132\001\002\000\004\006\133" +
    "\001\002\000\036\011\060\016\052\017\055\025\071\026" +
    "\070\027\065\030\057\031\067\032\053\033\054\034\061" +
    "\035\047\036\063\037\062\001\002\000\004\014\135\001" +
    "\002\000\004\004\136\001\002\000\032\003\ufff7\004\ufff7" +
    "\010\ufff7\011\ufff7\014\ufff7\021\ufff7\022\ufff7\043\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\001\002\000\032\003\147" +
    "\004\011\011\022\014\010\021\013\053\150\054\142\055" +
    "\141\056\153\057\152\061\145\062\140\001\002\000\004" +
    "\007\210\001\002\000\004\007\175\001\002\000\004\007" +
    "\210\001\002\000\034\003\uffd6\004\uffd6\011\uffd6\014\uffd6" +
    "\021\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\001\002\000\004\041\204\001\002" +
    "\000\004\007\175\001\002\000\034\003\027\004\011\011" +
    "\022\014\010\021\013\053\150\054\142\055\141\056\153" +
    "\057\152\060\170\061\145\062\140\001\002\000\014\004" +
    "\011\011\022\014\010\021\013\041\165\001\002\000\004" +
    "\007\155\001\002\000\034\003\uffce\004\uffce\011\uffce\014" +
    "\uffce\021\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\001\002\000\004\007\155\001" +
    "\002\000\004\007\155\001\002\000\034\003\uffd0\004\uffd0" +
    "\011\uffd0\014\uffd0\021\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002\000\004" +
    "\012\156\001\002\000\004\042\157\001\002\000\006\011" +
    "\117\016\121\001\002\000\004\014\161\001\002\000\004" +
    "\004\162\001\002\000\034\003\uffc9\004\uffc9\011\uffc9\014" +
    "\uffc9\021\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\001\002\000\034\003\uffcf\004" +
    "\uffcf\011\uffcf\014\uffcf\021\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\001\002\000" +
    "\034\003\uffd5\004\uffd5\011\uffd5\014\uffd5\021\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\001\002\000\004\014\166\001\002\000\004\004\167" +
    "\001\002\000\004\041\uffd8\001\002\000\012\047\025\050" +
    "\015\051\020\052\034\001\002\000\034\003\uffd7\004\uffd7" +
    "\011\uffd7\014\uffd7\021\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\004" +
    "\014\173\001\002\000\004\004\174\001\002\000\004\041" +
    "\uffd9\001\002\000\004\013\177\001\002\000\034\003\uffd4" +
    "\004\uffd4\011\uffd4\014\uffd4\021\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\001\002" +
    "\000\004\042\200\001\002\000\006\021\044\023\046\001" +
    "\002\000\004\014\202\001\002\000\004\004\203\001\002" +
    "\000\034\003\uffc7\004\uffc7\011\uffc7\014\uffc7\021\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\001\002\000\004\014\205\001\002\000\004\004" +
    "\206\001\002\000\032\003\uffda\004\uffda\010\uffda\011\uffda" +
    "\014\uffda\021\uffda\022\uffda\043\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\001\002\000\034\003\uffd2\004\uffd2\011\uffd2" +
    "\014\uffd2\021\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\001\002\000\004\012\211" +
    "\001\002\000\004\042\212\001\002\000\006\021\044\023" +
    "\046\001\002\000\004\014\214\001\002\000\004\004\215" +
    "\001\002\000\034\003\uffc8\004\uffc8\011\uffc8\014\uffc8\021" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\001\002\000\034\003\uffd1\004\uffd1\011" +
    "\uffd1\014\uffd1\021\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\001\002\000\034\003" +
    "\uffd3\004\uffd3\011\uffd3\014\uffd3\021\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\001" +
    "\002\000\006\004\222\015\223\001\002\000\032\003\uffff" +
    "\004\uffff\010\uffff\011\uffff\014\uffff\021\uffff\022\uffff\043" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\001\002\000\052" +
    "\003\uffc3\004\uffc3\010\uffc3\011\uffc3\014\uffc3\021\uffc3\022" +
    "\uffc3\043\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\002\004\001\001\000\026\003\013\004" +
    "\011\006\030\010\020\016\016\017\006\021\015\024\023" +
    "\031\022\032\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\220\006\030\010\020\016\016\017\006\021" +
    "\015\024\023\031\022\032\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\055\011\047\013" +
    "\050\014\065\015\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\072\013\050\014\065" +
    "\015\063\001\001\000\002\001\001\000\012\005\074\013" +
    "\050\014\065\015\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\103\013\050\014\065\015\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\055\011\112\013\050\014" +
    "\065\015\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\133\013\050\014\065\015\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\142\023" +
    "\145\030\143\031\150\032\031\001\001\000\004\026\216" +
    "\001\001\000\004\025\215\001\001\000\004\026\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\175" +
    "\001\001\000\010\022\170\031\150\032\031\001\001\000" +
    "\004\032\125\001\001\000\004\027\163\001\001\000\002" +
    "\001\001\000\004\027\162\001\001\000\004\027\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 
    
    public void syntax_error(Symbol s)
    {
            arreglos_publicos.contadorE = arreglos_publicos.contadorE + 1;
        String descrip = "Se encontro " + s.value  + " el cual no se esperaba";
        arreglos_publicos.errores.add(new  Error_(arreglos_publicos.contadorE, s.right, s.left,descrip,"Sintactico"));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
        arreglos_publicos.contadorE = arreglos_publicos.contadorE + 1;
        String descrip = "Se encontro " + s.value  + "se esperaba otra cosa y no se pudo recuperar";
        arreglos_publicos.errores.add(new  Error_(arreglos_publicos.contadorE, s.right, s.left,descrip,"Sintactico"));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol start_val = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= R_PROGRAM lista_instr R_END R_PROGRAM 
            {
              Arbol RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol p1 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Arbol ini = new Arbol("ini",-1,-1);
            ini.addHijo(new Arbol("PROGRAM",-1,-1));
            try {
            ini.addHijo(p1);
            } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
            }
            ini.addHijo(new Arbol("END",-1,-1));
            ini.addHijo(new Arbol("PROGRAM",-1,-1));
            RESULT = ini;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Arbol RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol p1 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p2 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P1 = new Arbol("List Instruction",-1,-1);
            try {
            P1.addHijo(p1);
            } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
            }
            try {
            P1.addHijo(p2);
            } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
            }
        RESULT = P1;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Arbol RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p2 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P1 = new Arbol("Instruccion",-1,-1);
        try {
            P1.addHijo(p2);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion_variable 
            {
              Arbol RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p3 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P2 = new Arbol("IntruccionDV",-1,-1);
        
        try {
            P2.addHijo(p3);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_arreglos 
            {
              Arbol RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p4 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P2 = new Arbol("IntruccionDA",-1,-1);
        
        try {
            P2.addHijo(p4);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= imprimir_expresiones 
            {
              Arbol RESULT =null;
		int p5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p5 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P2 = new Arbol("IntruccionIE",-1,-1);
        
         try {
           P2.addHijo(p5);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= imprimir_arreglos 
            {
              Arbol RESULT =null;
		int p6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p6 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P2 = new Arbol("IntruccionIA",-1,-1);
         try {
           P2.addHijo(p6);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= grafica 
            {
              Arbol RESULT =null;
		int p7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p7 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P2 = new Arbol("IntruccionG",-1,-1);
        try {
           P2.addHijo(p7);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= errors 
            {
              Arbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol e = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arbol("ERR",-1,-1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= R_VAR DOSPUNTOS tipo_datos PUNTOSDOBLE ID ASIGNACION expresion R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int p8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int p8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Arbol p8 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int p9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol p9 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Arbol P3 = new Arbol("IntruccionDV",-1,-1);
        P3.addHijo(new Arbol("var",-1,-1));
        P3.addHijo(new Arbol(":",-1,-1));
        try {
           P3.addHijo(p8);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P3.addHijo(new Arbol("::",-1,-1));
        P3.addHijo(new Arbol(i.toString(),ileft,iright));
        P3.addHijo(new Arbol ("<-",-1,-1));
        
        try {
           P3.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P3.addHijo(new Arbol("END",-1,-1));
        P3.addHijo(new Arbol(";",-1,-1));
        RESULT = P3;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_arreglos ::= R_ARR DOSPUNTOS tipo_datos PUNTOSDOBLE IDARR ASIGNACION arreglo R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int p8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int p8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Arbol p8 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int p10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol p10 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Arbol P4 = new Arbol("IntruccionDA",-1,-1);
        P4.addHijo(new Arbol("arr",-1,-1));
        P4.addHijo(new Arbol(":",-1,-1));
        
         try {
           P4.addHijo(p8);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P4.addHijo(new Arbol("::",-1,-1));
        P4.addHijo(new Arbol(ia.toString(),ialeft,iaright));
        P4.addHijo(new Arbol ("<-",-1,-1));
        
         try {
           P4.addHijo(p10);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P4.addHijo(new Arbol("END",-1,-1));
        P4.addHijo(new Arbol(";",-1,-1));
        RESULT=P4;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arreglo ::= CORCHETEA lista_expre CORCHETEC 
            {
              Arbol RESULT =null;
		int p11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol p11 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Arbol P10 = new Arbol("arreglo",-1,-1);
         P10.addHijo(new Arbol("[",-1,-1));
      
          try {
             P10.addHijo(p11);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
         P10.addHijo(new Arbol("]",-1,-1));
         RESULT = P10;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arreglo ::= IDARR 
            {
              Arbol RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ida = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         Arbol P10 = new Arbol("Idarreglo",-1,-1);
         P10.addHijo(new Arbol(ida.toString(),idaleft,idaright));
         RESULT=P10;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_expre ::= lista_expre COMA expresion 
            {
              Arbol RESULT =null;
		int p11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol p11 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p9 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Arbol P11 = new Arbol("Lista-expre",-1,-1);
             try {
             P11.addHijo(p11);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            P11.addHijo(new Arbol(",",-1,-1));
            
            try {
             P11.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            RESULT=P11;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expre",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_expre ::= expresion 
            {
              Arbol RESULT =null;
		int p9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p9 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Arbol P9 = new Arbol("Lista-expre",-1,-1);
            
              try {
             P9.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            RESULT = P9;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expre",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones ::= aritmetica PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Arbol RESULT =null;
		int p12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int p12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Arbol p12 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int p9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int p9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Arbol p9 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int p14left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p14right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol p14 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            Arbol FC = new Arbol("FARITMETICA",-1,-1);
           
             try {
              FC.addHijo(p12);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            FC.addHijo(new Arbol("(",-1,-1));
            
             try {
             FC.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            FC.addHijo(new Arbol(",",-1,-1));
            
             try {
             FC.addHijo(p14);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            FC.addHijo(new Arbol(")",-1,-1));
            RESULT = FC;
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funciones ::= estadistica PARENTESIS_A arreglo PARENTESIS_C 
            {
              Arbol RESULT =null;
		int p13left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int p13right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Arbol p13 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int p10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol p10 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Arbol FC = new Arbol("FESTADISTICA",-1,-1);
                FC.addHijo(p13);
                FC.addHijo(new Arbol("(",-1,-1));
                FC.addHijo(p10);
                FC.addHijo(new Arbol(")",-1,-1));
                RESULT = FC;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aritmetica ::= R_SUM 
            {
              Arbol RESULT =null;
		
                    Arbol P12 = new Arbol("ARITMETICAS",-1,-1);
                    P12.addHijo(new Arbol("SUM",-1,-1));
                    RESULT = P12;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aritmetica ::= R_RES 
            {
              Arbol RESULT =null;
		
                    Arbol P12 = new Arbol("ARITMETICAR",-1,-1);
                    P12.addHijo(new Arbol("RES",-1,-1));
                    RESULT = P12;
                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aritmetica ::= R_DIV 
            {
              Arbol RESULT =null;
		
                    Arbol P12 = new Arbol("ARITMETICAD",-1,-1);
                    P12.addHijo(new Arbol("DIV",-1,-1));
                    RESULT = P12;
                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aritmetica ::= R_MUL 
            {
              Arbol RESULT =null;
		
                    Arbol P12 = new Arbol("ARITMETICAM",-1,-1);
                    P12.addHijo(new Arbol("MUL",-1,-1));
                    RESULT = P12;
                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmetica ::= R_MOD 
            {
              Arbol RESULT =null;
		
                    Arbol P12 = new Arbol("ARITMETICAMO",-1,-1);
                    P12.addHijo(new Arbol("MOD",-1,-1));
                    RESULT = P12;
                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estadistica ::= R_MEDIA 
            {
              Arbol RESULT =null;
		
                Arbol P13 = new Arbol("EstadisticaME",-1,-1);
                P13.addHijo(new Arbol("MEDIA",-1,-1));
                RESULT = P13;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estadistica ::= R_MEDIANA 
            {
              Arbol RESULT =null;
		
                Arbol P13 = new Arbol("EstadisticaMED",-1,-1);
                P13.addHijo(new Arbol("MEDIANA",-1,-1));
                RESULT = P13;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estadistica ::= R_VARIANZA 
            {
              Arbol RESULT =null;
		
                Arbol P13 = new Arbol("EstadisticaV",-1,-1);
                P13.addHijo(new Arbol("VARIANZA",-1,-1));
                RESULT = P13;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estadistica ::= R_MAX 
            {
              Arbol RESULT =null;
		
                Arbol P13 = new Arbol("EstadisticaMA",-1,-1);
                P13.addHijo(new Arbol("MAX",-1,-1));
                RESULT = P13;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estadistica ::= R_MODA 
            {
              Arbol RESULT =null;
		
                Arbol P13 = new Arbol("EstadisticaMO",-1,-1);
                P13.addHijo(new Arbol("MODA",-1,-1));
                RESULT = P13;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estadistica ::= R_MIN 
            {
              Arbol RESULT =null;
		
                Arbol P13 = new Arbol("EstadisticaMI",-1,-1);
                P13.addHijo(new Arbol("MIN",-1,-1));
                RESULT = P13;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadistica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_datos ::= R_CHAR 
            {
              Arbol RESULT =null;
		
            Arbol P8 = new Arbol("tipoDato",-1,-1);
            P8.addHijo(new Arbol("char[]",-2,-2));
            RESULT = P8;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_datos ::= R_DOUBLE 
            {
              Arbol RESULT =null;
		
            Arbol P8 = new Arbol("tipoDato",-1,-1);
            P8.addHijo(new Arbol("double",-3,-3));
            RESULT = P8;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= funciones 
            {
              Arbol RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol fc = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(fc);
                RESULT = P9;
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= CADENA 
            {
              Arbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(new Arbol(c.toString(),cleft,cright));
                RESULT = P9;

             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= DECIMAL 
            {
              Arbol RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
               Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(new Arbol(num.toString(),numleft,numright));
                RESULT = P9;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= ID 
            {
              Arbol RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(new Arbol(ide.toString(),ideleft,ideright));
                RESULT = P9;
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_arreglo ::= CADENA 
            {
              Arbol RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Arbol expre = new Arbol("expre",-1,-1);
            expre.addHijo(new Arbol(cad.toString(),cadleft,cadright));
            RESULT = expre;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_arreglo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_arreglo ::= ID 
            {
              Arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Arbol expre = new Arbol("expre",-1,-1);
            expre.addHijo(new Arbol(id.toString(),idleft,idright));
            RESULT = expre;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_arreglo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // imprimir_expresiones ::= R_CONSOLE PUNTOSDOBLE R_PRINT IGUAL lista_expre R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int p11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol p11 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       Arbol P5 = new Arbol("ImprimirE",-1,-1);
       P5.addHijo(new Arbol("CONSOLE",-1,-1));
       P5.addHijo(new Arbol("::",-1,-1));
       P5.addHijo(new Arbol("PRINT",-1,-1));
       P5.addHijo(new Arbol("=",-1,-1));
       P5.addHijo(p11);
       P5.addHijo(new Arbol("END",-1,-1));
       P5.addHijo(new Arbol(";",-1,-1));
       RESULT = P5;
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // imprimir_arreglos ::= R_CONSOLE PUNTOSDOBLE R_COLUMN IGUAL expresion_arreglo ASIGNACION2 arreglo R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int p11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int p11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Arbol p11 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int p12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol p12 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Arbol P6 = new Arbol("ImprimirA",-1,-1);
        P6.addHijo(new Arbol("CONSOLE",-1,-1));
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("COLUMN",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(p11);
        P6.addHijo(new Arbol("->",-1,-1));
        P6.addHijo(p12);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir_arreglos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // grafica ::= tipo_grafica PARENTESIS_A parametros_grafica PARENTESIS_C R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int tgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Arbol tg = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Arbol pg = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    Arbol P7 =new Arbol("Graficar",-1,-1);
    P7.addHijo(tg);
    P7.addHijo(new Arbol ("(",-1,-1 ));
    P7.addHijo(pg);
    P7.addHijo(new Arbol (")",-1,-1 ));
    P7.addHijo(new Arbol("END",-1,-1));
    P7.addHijo(new Arbol(";",-1,-1));
    RESULT = P7;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafica",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_grafica ::= lista_sentencia R_EXEC tipo_grafica R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Arbol ls = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol tg = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Arbol P8 = new Arbol("ParametrosG",-1,-1);
    try {
        P8.addHijo(ls);
    } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
    }
    P8.addHijo(new Arbol("EXEC",-1,-1));
     try {
        P8.addHijo(tg);
    } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
    }
    P8.addHijo(new Arbol("END",-1,-1));
    P8.addHijo(new Arbol(";",-1,-1));
    RESULT = P8;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_grafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_grafica ::= error PARENTESIS_C R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		
    RESULT= new Arbol("ERR", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_grafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_sentencia ::= lista_sentencia sentencia 
            {
              Arbol RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol p1 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p2 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P1 = new Arbol("List Instruction",-1,-1);
        try {
        P1.addHijo(p1);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        try {
        P1.addHijo(p2);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_sentencia ::= sentencia 
            {
              Arbol RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol p2 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P1 = new Arbol("Instruccion",-1,-1);
        try {
        P1.addHijo(p2);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= R_TITULO parametrocadena 
            {
              Arbol RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol pc = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Arbol P1 = new Arbol("PTITULO",-1,-1);
        P1.addHijo(new Arbol("TITULO",-1,-1));
        try {
        P1.addHijo(pc);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= R_VALUES parametro_arreglo_double 
            {
              Arbol RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol pd = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Arbol P1 = new Arbol("PVALUES",-1,-1);
        P1.addHijo(new Arbol("VALUES",-1,-1));
         try {
        P1.addHijo(pd);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= R_LABEL parametro_arreglo_char 
            {
              Arbol RESULT =null;
		int pacleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pacright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol pac = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Arbol P1 = new Arbol("PLABEL",-1,-1);
        P1.addHijo(new Arbol("LABEL",-1,-1));
        try {
        P1.addHijo(pac);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= R_EJEX parametro_arreglo_char 
            {
              Arbol RESULT =null;
		int pacleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pacright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol pac = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
     Arbol P1 = new Arbol("PEJEX",-1,-1);
        P1.addHijo(new Arbol("EJEX",-1,-1));
         try {
        P1.addHijo(pac);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= R_EJEY parametro_arreglo_double 
            {
              Arbol RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol pd = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
     Arbol P1 = new Arbol("PEJEY",-1,-1);
        P1.addHijo(new Arbol("EJEY",-1,-1));
         try {
        P1.addHijo(pd);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= R_TITULOX parametrocadena 
            {
              Arbol RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol pc = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
     Arbol P1 = new Arbol("PTILULOX",-1,-1);
        P1.addHijo(new Arbol("TITULOX",-1,-1));
         try {
        P1.addHijo(pc);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= R_TITULOY parametrocadena 
            {
              Arbol RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol pc = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
     Arbol P1 = new Arbol("PTITULOY",-1,-1);
        P1.addHijo(new Arbol("TITULOY",-1,-1));
        try {
        P1.addHijo(pc);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= errors 
            {
              Arbol RESULT =null;
		
            RESULT = new Arbol("ERR", -1, -1); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_grafica ::= R_BAR 
            {
              Arbol RESULT =null;
		                Arbol P13 = new Arbol("gbar",-1,-1);
                P13.addHijo(new Arbol("BAR",-1,-1));
                RESULT = P13;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_grafica",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_grafica ::= R_LINE 
            {
              Arbol RESULT =null;
		                Arbol P13 = new Arbol("gline",-1,-1);
                P13.addHijo(new Arbol("LINE",-1,-1));
                RESULT = P13;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_grafica",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_grafica ::= R_PIE 
            {
              Arbol RESULT =null;
		                Arbol P13 = new Arbol("gpie",-1,-1);
                P13.addHijo(new Arbol("PIE",-1,-1));
                RESULT = P13;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_grafica",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_grafica ::= R_HISTOGRAM 
            {
              Arbol RESULT =null;
		                Arbol P13 = new Arbol("ghisto",-1,-1);
                P13.addHijo(new Arbol("HISTOGRAM",-1,-1));
                RESULT = P13;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_grafica",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametrocadena ::= PUNTOSDOBLE R_CHAR IGUAL expresion_arreglo R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol ea = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Arbol P6 = new Arbol("ParametroC",-1,-1);
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("char[]",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(ea);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrocadena",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro_arreglo_char ::= PUNTOSDOBLE R_CHAR IGUAL arreglo R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol a = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

        Arbol P6 = new Arbol("ParametroAC",-1,-1);
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("char[]",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(a);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_arreglo_char",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametro_arreglo_double ::= PUNTOSDOBLE R_DOUBLE IGUAL arreglo R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol a = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Arbol P6 = new Arbol("ParametroAD",-1,-1);
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("DOUBLE",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(a);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_arreglo_double",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // errors ::= error error_save 
            {
              Arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("errors",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // errors ::= error_save 
            {
              Arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("errors",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // error_save ::= PUNTOYCOMA 
            {
              Arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_save",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // error_save ::= R_END PUNTOYCOMA 
            {
              Arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_save",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // error_save ::= ID 
            {
              Arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println("Error: ID " + id + " no se encuentra en una estructura válida.");

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_save",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // error_save ::= IDARR 
            {
              Arbol RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println("Error: arr " + arr + " no se encuentra en una estructura válida.");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_save",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
