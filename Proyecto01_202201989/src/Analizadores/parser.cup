//------------------Importaciones-----------------------------
package Analizadores; 
//aqui va el arbol, gramatica, lista errores
import java_cup.runtime.*;
import java.util.LinkedList;
import clases.*;
//------> Codigo para el parser, variables, metodos

//------> Declaracion de variables, funciones y funciones de error
class Parser;

parser code 
{:
    public static String resultado = ""; 
    
    public void syntax_error(Symbol s)
    {
            arreglos_publicos.contadorE = arreglos_publicos.contadorE + 1;
        String descrip = "Se encontro " + s.value  + " el cual no se esperaba";
        arreglos_publicos.errores.add(new  Error_(arreglos_publicos.contadorE, s.right, s.left,descrip,"Sintactico"));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
        arreglos_publicos.contadorE = arreglos_publicos.contadorE + 1;
        String descrip = "Se encontro " + s.value  + "se esperaba otra cosa y no se pudo recuperar";
        arreglos_publicos.errores.add(new  Error_(arreglos_publicos.contadorE, s.right, s.left,descrip,"Sintactico"));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }
:}
//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}
//------> DeclaraciÃ³n de terminales

terminal PUNTOYCOMA, DOSPUNTOS, ASIGNACION, PUNTOSDOBLE;
terminal R_VAR,ID, R_CHAR, R_DOUBLE,R_END;
terminal R_PROGRAM;
terminal CADENA;
terminal DECIMAL;
terminal COMA, IDARR, R_ARR,CORCHETEA,CORCHETEC;
terminal R_SUM, R_RES, R_MUL,R_DIV, R_MOD;
terminal R_MEDIA, R_MEDIANA, R_MODA,R_VARIANZA,R_MAX,R_MIN,PARENTESIS_A,PARENTESIS_C;
terminal IGUAL,R_CONSOLE,R_PRINT;
terminal R_COLUMN, ASIGNACION2;
terminal R_BAR,R_LINE,R_PIE,R_HISTOGRAM;
terminal R_TITULO, R_EJEX,R_EJEY,R_TITULOX,R_TITULOY,R_EXEC,R_VALUES,R_LABEL;

//------> Declaracion de no terminales
nonterminal Arbol inicio, instruccion, lista_instr, expresion, declaracion_variable, tipo_datos, declaracion_arreglos,lista_expre,arreglo, 
funciones,aritmetica,estadistica, imprimir_expresiones,imprimir_arreglos,expresion_arreglo, tipo_grafica,sentencia,lista_sentencia,grafica, 
parametro_arreglo_double,parametro_arreglo_char,parametrocadena,parametros_grafica,errors,error_save;
//------> PRECEDENCIA

//------> Definir Simbolo Inicial
start with inicio;  

// ------------>  Producciones  <------------
 
inicio ::= R_PROGRAM lista_instr:p1 R_END R_PROGRAM
        {:
            Arbol ini = new Arbol("ini",-1,-1);
            ini.addHijo(new Arbol("PROGRAM",-1,-1));
            try {
            ini.addHijo(p1);
            } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
            }
            ini.addHijo(new Arbol("END",-1,-1));
            ini.addHijo(new Arbol("PROGRAM",-1,-1));
            RESULT = ini;
        :}
;

lista_instr ::= lista_instr:p1 instruccion:p2
    {:
        Arbol P1 = new Arbol("List Instruction",-1,-1);
            try {
            P1.addHijo(p1);
            } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
            }
            try {
            P1.addHijo(p2);
            } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
            }
        RESULT = P1;
    :}
    | instruccion:p2
    {:
        Arbol P1 = new Arbol("Instruccion",-1,-1);
        try {
            P1.addHijo(p2);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1;
    :}
;

instruccion ::= declaracion_variable:p3
    {:
        Arbol P2 = new Arbol("IntruccionDV",-1,-1);
        
        try {
            P2.addHijo(p3);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    :}
    |declaracion_arreglos:p4
    {:
        Arbol P2 = new Arbol("IntruccionDA",-1,-1);
        
        try {
            P2.addHijo(p4);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    :}

    |imprimir_expresiones:p5
     {:
        Arbol P2 = new Arbol("IntruccionIE",-1,-1);
        
         try {
           P2.addHijo(p5);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    :}
    |imprimir_arreglos:p6
    {:
        Arbol P2 = new Arbol("IntruccionIA",-1,-1);
         try {
           P2.addHijo(p6);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    :}
    |grafica:p7
    {:
        Arbol P2 = new Arbol("IntruccionG",-1,-1);
        try {
           P2.addHijo(p7);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P2;
    :}
    |errors:e{:RESULT = new Arbol("ERR",-1,-1);:}
;

 //declaraciones variables y arreglo
declaracion_variable ::= R_VAR DOSPUNTOS tipo_datos:p8 PUNTOSDOBLE  ID:i ASIGNACION  expresion:p9 R_END PUNTOYCOMA
    {:
        Arbol P3 = new Arbol("IntruccionDV",-1,-1);
        P3.addHijo(new Arbol("var",-1,-1));
        P3.addHijo(new Arbol(":",-1,-1));
        try {
           P3.addHijo(p8);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P3.addHijo(new Arbol("::",-1,-1));
        P3.addHijo(new Arbol(i.toString(),ileft,iright));
        P3.addHijo(new Arbol ("<-",-1,-1));
        
        try {
           P3.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P3.addHijo(new Arbol("END",-1,-1));
        P3.addHijo(new Arbol(";",-1,-1));
        RESULT = P3;
    :}
    ;

declaracion_arreglos ::= R_ARR DOSPUNTOS tipo_datos:p8 PUNTOSDOBLE IDARR:ia ASIGNACION arreglo:p10 R_END PUNTOYCOMA
{:
        Arbol P4 = new Arbol("IntruccionDA",-1,-1);
        P4.addHijo(new Arbol("arr",-1,-1));
        P4.addHijo(new Arbol(":",-1,-1));
        
         try {
           P4.addHijo(p8);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P4.addHijo(new Arbol("::",-1,-1));
        P4.addHijo(new Arbol(ia.toString(),ialeft,iaright));
        P4.addHijo(new Arbol ("<-",-1,-1));
        
         try {
           P4.addHijo(p10);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
        P4.addHijo(new Arbol("END",-1,-1));
        P4.addHijo(new Arbol(";",-1,-1));
        RESULT=P4;

:}
;

arreglo ::= CORCHETEA lista_expre:p11 CORCHETEC  
    {:
        Arbol P10 = new Arbol("arreglo",-1,-1);
         P10.addHijo(new Arbol("[",-1,-1));
      
          try {
             P10.addHijo(p11);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
         P10.addHijo(new Arbol("]",-1,-1));
         RESULT = P10;
    :}

    |   IDARR:ida
    {:
         Arbol P10 = new Arbol("Idarreglo",-1,-1);
         P10.addHijo(new Arbol(ida.toString(),idaleft,idaright));
         RESULT=P10;
    :}
;

lista_expre ::= lista_expre:p11 COMA expresion:p9
        {:
            Arbol P11 = new Arbol("Lista-expre",-1,-1);
             try {
             P11.addHijo(p11);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            P11.addHijo(new Arbol(",",-1,-1));
            
            try {
             P11.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            RESULT=P11;
        :}
    |   expresion:p9
        {:
            Arbol P9 = new Arbol("Lista-expre",-1,-1);
            
              try {
             P9.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            RESULT = P9;
        :}
;

funciones ::= aritmetica:p12 PARENTESIS_A expresion:p9 COMA expresion:p14 PARENTESIS_C 
        {:
            Arbol FC = new Arbol("FARITMETICA",-1,-1);
           
             try {
              FC.addHijo(p12);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            FC.addHijo(new Arbol("(",-1,-1));
            
             try {
             FC.addHijo(p9);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            FC.addHijo(new Arbol(",",-1,-1));
            
             try {
             FC.addHijo(p14);
        } catch (Exception e) {
            RESULT= new Arbol("ERR", -1, -1);
        }
            FC.addHijo(new Arbol(")",-1,-1));
            RESULT = FC;
        
        :}
        |estadistica:p13 PARENTESIS_A arreglo:p10 PARENTESIS_C
        {:
                Arbol FC = new Arbol("FESTADISTICA",-1,-1);
                FC.addHijo(p13);
                FC.addHijo(new Arbol("(",-1,-1));
                FC.addHijo(p10);
                FC.addHijo(new Arbol(")",-1,-1));
                RESULT = FC;
        :}
;

aritmetica ::= R_SUM 
                {:
                    Arbol P12 = new Arbol("ARITMETICAS",-1,-1);
                    P12.addHijo(new Arbol("SUM",-1,-1));
                    RESULT = P12;
                :}
            | R_RES 
                {:
                    Arbol P12 = new Arbol("ARITMETICAR",-1,-1);
                    P12.addHijo(new Arbol("RES",-1,-1));
                    RESULT = P12;
                
                :}
            | R_DIV
                {:
                    Arbol P12 = new Arbol("ARITMETICAD",-1,-1);
                    P12.addHijo(new Arbol("DIV",-1,-1));
                    RESULT = P12;
                
                :}
            | R_MUL
                {:
                    Arbol P12 = new Arbol("ARITMETICAM",-1,-1);
                    P12.addHijo(new Arbol("MUL",-1,-1));
                    RESULT = P12;
                
                :}
            | R_MOD
                {:
                    Arbol P12 = new Arbol("ARITMETICAMO",-1,-1);
                    P12.addHijo(new Arbol("MOD",-1,-1));
                    RESULT = P12;
                
                :}
;

estadistica ::= R_MEDIA
            {:
                Arbol P13 = new Arbol("EstadisticaME",-1,-1);
                P13.addHijo(new Arbol("MEDIA",-1,-1));
                RESULT = P13;
            :}
             | R_MEDIANA 
             {:
                Arbol P13 = new Arbol("EstadisticaMED",-1,-1);
                P13.addHijo(new Arbol("MEDIANA",-1,-1));
                RESULT = P13;
             :}
             | R_VARIANZA 
             {:
                Arbol P13 = new Arbol("EstadisticaV",-1,-1);
                P13.addHijo(new Arbol("VARIANZA",-1,-1));
                RESULT = P13;
             :}
             | R_MAX 
             {:
                Arbol P13 = new Arbol("EstadisticaMA",-1,-1);
                P13.addHijo(new Arbol("MAX",-1,-1));
                RESULT = P13;
             :}
             | R_MODA 
             {:
                Arbol P13 = new Arbol("EstadisticaMO",-1,-1);
                P13.addHijo(new Arbol("MODA",-1,-1));
                RESULT = P13;
             :}
             | R_MIN
             {:
                Arbol P13 = new Arbol("EstadisticaMI",-1,-1);
                P13.addHijo(new Arbol("MIN",-1,-1));
                RESULT = P13;
             :}
;

tipo_datos ::= R_CHAR
        {:
            Arbol P8 = new Arbol("tipoDato",-1,-1);
            P8.addHijo(new Arbol("char[]",-2,-2));
            RESULT = P8;
        :}
    | R_DOUBLE      
        {:
            Arbol P8 = new Arbol("tipoDato",-1,-1);
            P8.addHijo(new Arbol("double",-3,-3));
            RESULT = P8;
        :}                    
;
expresion ::= funciones:fc 
            {:
                Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(fc);
                RESULT = P9;
            
            :}
     |CADENA:c 
            {: 
                Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(new Arbol(c.toString(),cleft,cright));
                RESULT = P9;

             :}
  | DECIMAL:num
             {: 
               Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(new Arbol(num.toString(),numleft,numright));
                RESULT = P9;
             :}

     | ID:ide 
            {: 
                Arbol P9 = new Arbol("exp",-1,-1);
                P9.addHijo(new Arbol(ide.toString(),ideleft,ideright));
                RESULT = P9;
            
            :}
            
;
expresion_arreglo ::= CADENA:cad
        {:
            Arbol expre = new Arbol("expre",-1,-1);
            expre.addHijo(new Arbol(cad.toString(),cadleft,cadright));
            RESULT = expre;
        :}
    |ID:id
        {:
            Arbol expre = new Arbol("expre",-1,-1);
            expre.addHijo(new Arbol(id.toString(),idleft,idright));
            RESULT = expre;
        :}
    ;   
//impresiones
imprimir_expresiones ::= R_CONSOLE PUNTOSDOBLE R_PRINT IGUAL lista_expre:p11 R_END PUNTOYCOMA
    {:
       Arbol P5 = new Arbol("ImprimirE",-1,-1);
       P5.addHijo(new Arbol("CONSOLE",-1,-1));
       P5.addHijo(new Arbol("::",-1,-1));
       P5.addHijo(new Arbol("PRINT",-1,-1));
       P5.addHijo(new Arbol("=",-1,-1));
       P5.addHijo(p11);
       P5.addHijo(new Arbol("END",-1,-1));
       P5.addHijo(new Arbol(";",-1,-1));
       RESULT = P5;
    
    :}

;
imprimir_arreglos ::= R_CONSOLE PUNTOSDOBLE R_COLUMN IGUAL expresion_arreglo:p11 ASIGNACION2 arreglo:p12 R_END PUNTOYCOMA
     {:
        Arbol P6 = new Arbol("ImprimirA",-1,-1);
        P6.addHijo(new Arbol("CONSOLE",-1,-1));
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("COLUMN",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(p11);
        P6.addHijo(new Arbol("->",-1,-1));
        P6.addHijo(p12);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;
     :}
;

//graficas
grafica::= tipo_grafica:tg PARENTESIS_A parametros_grafica:pg PARENTESIS_C R_END PUNTOYCOMA
{:
    Arbol P7 =new Arbol("Graficar",-1,-1);
    P7.addHijo(tg);
    P7.addHijo(new Arbol ("(",-1,-1 ));
    P7.addHijo(pg);
    P7.addHijo(new Arbol (")",-1,-1 ));
    P7.addHijo(new Arbol("END",-1,-1));
    P7.addHijo(new Arbol(";",-1,-1));
    RESULT = P7;

:}
;
parametros_grafica ::= lista_sentencia:ls R_EXEC tipo_grafica:tg R_END PUNTOYCOMA
{:
    Arbol P8 = new Arbol("ParametrosG",-1,-1);
    try {
        P8.addHijo(ls);
    } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
    }
    P8.addHijo(new Arbol("EXEC",-1,-1));
     try {
        P8.addHijo(tg);
    } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
    }
    P8.addHijo(new Arbol("END",-1,-1));
    P8.addHijo(new Arbol(";",-1,-1));
    RESULT = P8;
:}
| error PARENTESIS_C R_END PUNTOYCOMA {:
    RESULT= new Arbol("ERR", -1, -1); :}
;

lista_sentencia ::= lista_sentencia:p1 sentencia:p2
    {:
        Arbol P1 = new Arbol("List Instruction",-1,-1);
        try {
        P1.addHijo(p1);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        try {
        P1.addHijo(p2);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1;
    :}
    |sentencia:p2
        {:
        Arbol P1 = new Arbol("Instruccion",-1,-1);
        try {
        P1.addHijo(p2);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1;
    :}
;
sentencia ::= R_TITULO parametrocadena:pc 
        {:
        Arbol P1 = new Arbol("PTITULO",-1,-1);
        P1.addHijo(new Arbol("TITULO",-1,-1));
        try {
        P1.addHijo(pc);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
      :}
    |R_VALUES parametro_arreglo_double:pd
    {: 
        Arbol P1 = new Arbol("PVALUES",-1,-1);
        P1.addHijo(new Arbol("VALUES",-1,-1));
         try {
        P1.addHijo(pd);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    :}
    |R_LABEL parametro_arreglo_char:pac
    {: 
        Arbol P1 = new Arbol("PLABEL",-1,-1);
        P1.addHijo(new Arbol("LABEL",-1,-1));
        try {
        P1.addHijo(pac);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    :}
    |R_EJEX parametro_arreglo_char:pac
    {: 
     Arbol P1 = new Arbol("PEJEX",-1,-1);
        P1.addHijo(new Arbol("EJEX",-1,-1));
         try {
        P1.addHijo(pac);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    
     :}
    |R_EJEY parametro_arreglo_double:pd
    {: 
     Arbol P1 = new Arbol("PEJEY",-1,-1);
        P1.addHijo(new Arbol("EJEY",-1,-1));
         try {
        P1.addHijo(pd);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    :}
    |R_TITULOX parametrocadena:pc
    {:  
     Arbol P1 = new Arbol("PTILULOX",-1,-1);
        P1.addHijo(new Arbol("TITULOX",-1,-1));
         try {
        P1.addHijo(pc);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    :}
    |R_TITULOY parametrocadena:pc
    {: 
     Arbol P1 = new Arbol("PTITULOY",-1,-1);
        P1.addHijo(new Arbol("TITULOY",-1,-1));
        try {
        P1.addHijo(pc);
        } catch (Exception e) {
        RESULT= new Arbol("ERR", -1, -1);
        }
        RESULT = P1; 
    :}
    | errors{:
            RESULT = new Arbol("ERR", -1, -1); 
    :}
;
tipo_grafica ::= R_BAR 
{:                Arbol P13 = new Arbol("gbar",-1,-1);
                P13.addHijo(new Arbol("BAR",-1,-1));
                RESULT = P13;
                :}
| R_LINE 
{:                Arbol P13 = new Arbol("gline",-1,-1);
                P13.addHijo(new Arbol("LINE",-1,-1));
                RESULT = P13;
                :}
| R_PIE 
{:                Arbol P13 = new Arbol("gpie",-1,-1);
                P13.addHijo(new Arbol("PIE",-1,-1));
                RESULT = P13;
                :}
|R_HISTOGRAM
{:                Arbol P13 = new Arbol("ghisto",-1,-1);
                P13.addHijo(new Arbol("HISTOGRAM",-1,-1));
                RESULT = P13;
                :}
;
parametrocadena::= PUNTOSDOBLE R_CHAR IGUAL expresion_arreglo:ea R_END PUNTOYCOMA
     {:
        Arbol P6 = new Arbol("ParametroC",-1,-1);
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("char[]",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(ea);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;
     :}

;
parametro_arreglo_char ::=  PUNTOSDOBLE R_CHAR IGUAL arreglo:a R_END PUNTOYCOMA
{:

        Arbol P6 = new Arbol("ParametroAC",-1,-1);
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("char[]",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(a);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;
:}
;
parametro_arreglo_double ::= PUNTOSDOBLE R_DOUBLE IGUAL arreglo:a R_END PUNTOYCOMA
{:
        Arbol P6 = new Arbol("ParametroAD",-1,-1);
        P6.addHijo(new Arbol("::",-1,-1));
        P6.addHijo(new Arbol("DOUBLE",-1,-1));
        P6.addHijo(new Arbol("=",-1,-1));
        P6.addHijo(a);
        P6.addHijo(new Arbol("END",-1,-1));
        P6.addHijo(new Arbol(";",-1,-1));
        RESULT = P6;
:}
;
 